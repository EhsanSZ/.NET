// <auto-generated />
using System;
using EFQuerySample.Hir;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFQuerySample.Hir.Migrations
{
    [DbContext(typeof(EmpContext))]
    partial class EmpContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EFQuerySample.Hir.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Employe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Employes");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Type01", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Type01s");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Type02", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type01Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Type01Id");

                    b.ToTable("Type02s");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Type03", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type02Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Type02Id");

                    b.ToTable("Type03s");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Address", b =>
                {
                    b.HasOne("EFQuerySample.Hir.Person", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Employe", b =>
                {
                    b.HasOne("EFQuerySample.Hir.Employe", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Type02", b =>
                {
                    b.HasOne("EFQuerySample.Hir.Type01", "Type01")
                        .WithMany("Type02s")
                        .HasForeignKey("Type01Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type01");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Type03", b =>
                {
                    b.HasOne("EFQuerySample.Hir.Type02", "Type02")
                        .WithMany("Type03s")
                        .HasForeignKey("Type02Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type02");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Employe", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Person", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Type01", b =>
                {
                    b.Navigation("Type02s");
                });

            modelBuilder.Entity("EFQuerySample.Hir.Type02", b =>
                {
                    b.Navigation("Type03s");
                });
#pragma warning restore 612, 618
        }
    }
}
